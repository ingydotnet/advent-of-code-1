#!/usr/bin/env ys-0

defn main(& args):
  input =: (or args.0 "input")
  world =: parse(input)

  all-antinodes =:
    reduce-kv _ (vector) world.get(:antenna-groups):
      fn(antinodes antenna coordinates):
        antinodes-of-current-antenna =:
          (comp concat non-nils):
            for [a coordinates b coordinates]:
              if a == b:
                =>: nil
                antinodes-of: a b
        concat: antinodes apply(concat antinodes-of-current-antenna)

  in-bound =:
    grep _ all-antinodes:set:vec:
      fn(it):
        and:
          in-range?: 0 world.get(:height) it.0
          in-range?: 0 world.get(:width) it.1

  println: in-bound:len

defn parse(file):
  raw-lines =: file:slurp:lines
  antenna-groups =:
    reduce-kv _ (hash-map) raw-lines:
      fn(idx j line):
        reduce-kv _ idx line:vec:
          fn(idx i c):
            if c == \\.:
              then: idx
              else:
                n =: idx.get(c) || ()
                assoc: idx c n.conj([j i])
  hash-map:
    :height raw-lines:len
    :width  raw-lines.0:len
    :antenna-groups antenna-groups

defn antinodes-of(a b):
  dy =: b.0 - a.0
  dx =: b.1 - a.1
  list:
    vector: (a.0 - dy) (a.1 - dx)
    vector: (b.0 + dy) (b.1 + dx)

defn non-nils(coll): remove(nil? coll)

defn in-range?(start end val):
  and:
    <=: start val
    <: val end
