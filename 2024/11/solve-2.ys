#!/usr/bin/env ys-0

defn main(& args):
  input =: (or args.0 "input")
  fstones =: frequencies(init(input))
  println: fstones.blink(75):total-stones

defn init(input):
  input:slurp:lines:first.split(" ").map(fn([w] w:N))

defn total-stones(fstones):
  sum: vals(fstones)

defn blink(fstones n=1):
  if n == 0:
    =>: fstones
    do:
      new-fstones =:
        reduce _ (hash-map) fstones:seq:
          fn(new-fstones [old-stone old-frequency]):
            reduce _ new-fstones transform(old-stone):frequencies:seq:
              fn(new-fstones [new-stone partial-frequency]):
                new-partial-frequency =:
                  +: (new-fstones.get(new-stone) || 0) (partial-frequency * fstones.get(old-stone))
                into new-fstones: (hash-map new-stone new-partial-frequency)
      recur: new-fstones n.--

defn transform(stone):
  cond:
    stone == 0:
      vector: 1
    stone:S:len:even?:
      stone-left =: stone:str.subs(0 (stone:str:len / 2))
      stone-right =: stone:str.subs(stone:str:len / 2)
      vector: stone-left:N stone-right:N
    else:
      vector: 2024 * stone
