#!/usr/bin/env ys-0

defn main(input='input'): !:say
  terrain =: input:slurp:lines
  regions =: regions(terrain)
  total-price: terrain regions

defn total-price(terrain regions):
  defn price(region):
    region.# * perimeter(terrain region)
  sum: regions.map(price)

defn perimeter(terrain region):
  region.map(
    \(nesw(_).remove(\(region.get(_))).#)
  ):sum

dirs =::
- [1, 0]
- [-1, 0]
- [0, 1]
- [0, -1]

defn nesw([y x]):
  for [d0 d1] dirs:
    vector:
      (y + d0)
      (x + d1)

defn regions(terrain): !:first
  coordinates =:
    ? for
      y terrain.#:range,
      x terrain.0.#:range
    : vector(y x)

  reduce _ [[] \{}] coordinates:
    fn([regions visited] yx):
      if visited.get(yx):
        vector: regions visited
        else:
          y x =: yx
          region =: terrain.region(terrain.$y.$x [yx])
          vector regions.conj(region): visited + region

defn region(terrain, marker, s0):
  # Return a set of coordinates (r) that is in the same region as yx0
  #   marker -- the wanted marker.
  #       s0 -- a stack of coordinates that is yet to be explored.
  #       r0 -- the accumulated set that is the region (the result)
  #       v0 -- a hash-set to keep track of visited coordinates.
  loop s0 s0, r0 \{}, v0 \{}:
    yx =: s0:first
    y x =: yx
    defn ok([y x]):
      (-1 < y < terrain.#) &&
      (-1 < x < terrain.#)

    if s0.?:
      then:
        v =: v0.conj(yx)
        if terrain.$y.$x == marker:
          then:
            s =: s0:rest +
              nesw(yx)
                .filter(ok)
                .remove(\(_.in?(v)))
                .remove(\(_.in?(s0)))
            recur: s, r0.conj(yx), v0.conj(yx)
          else:
            recur: s0:rest, r0, v0.conj(yx)
      else: r0
