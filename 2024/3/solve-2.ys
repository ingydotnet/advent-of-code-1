#!/usr/bin/env ys-0

defn walk(s do? op ops):
  cond:
    op.! : s
    op.0 == "mul":
      walk _ do? ops:first ops:rest:
        s + (* do? op.1:to-num op.2:to-num)
    else:
      walk s _ ops:first ops:rest:
        cond:
          op.0 == "do"    : 1
          op.0 == "don't" : 0
          else: die("do don't what?")

defn main():
  ops =:
    map:
      fn([_ ok ng mul n1 n2]): (list (or? ok ng mul) n1 n2)
      re-seq /(do)\(\)|(don't)\(\)|(mul)\(([0-9][0-9]?[0-9]?),([0-9][0-9]?[0-9]?)\)/:
        slurp("input")
  println:
    walk 0 1 ops:first : ops:rest
